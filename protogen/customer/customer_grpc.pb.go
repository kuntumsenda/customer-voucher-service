// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: customer/customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CustomerServiceCreateCustomerFullMethodName       = "/customer.CustomerService/CreateCustomer"
	CustomerServiceListCustomerFullMethodName         = "/customer.CustomerService/ListCustomer"
	CustomerServiceUpdateCustomerFullMethodName       = "/customer.CustomerService/UpdateCustomer"
	CustomerServiceUpdateCustomerPointsFullMethodName = "/customer.CustomerService/UpdateCustomerPoints"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	CreateCustomer(ctx context.Context, in *CreateCustomerReq, opts ...grpc.CallOption) (*CreateCustomerRes, error)
	ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...grpc.CallOption) (*ListCustomerRes, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerReq, opts ...grpc.CallOption) (*UpdateCustomerRes, error)
	UpdateCustomerPoints(ctx context.Context, in *UpdateCustomerPointsReq, opts ...grpc.CallOption) (*UpdateCustomerPointsRes, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerReq, opts ...grpc.CallOption) (*CreateCustomerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerRes)
	err := c.cc.Invoke(ctx, CustomerServiceCreateCustomerFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) ListCustomer(ctx context.Context, in *ListCustomerReq, opts ...grpc.CallOption) (*ListCustomerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCustomerRes)
	err := c.cc.Invoke(ctx, CustomerServiceListCustomerFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerReq, opts ...grpc.CallOption) (*UpdateCustomerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerRes)
	err := c.cc.Invoke(ctx, CustomerServiceUpdateCustomerFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomerPoints(ctx context.Context, in *UpdateCustomerPointsReq, opts ...grpc.CallOption) (*UpdateCustomerPointsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCustomerPointsRes)
	err := c.cc.Invoke(ctx, CustomerServiceUpdateCustomerPointsFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility.
type CustomerServiceServer interface {
	CreateCustomer(context.Context, *CreateCustomerReq) (*CreateCustomerRes, error)
	ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerRes, error)
	UpdateCustomer(context.Context, *UpdateCustomerReq) (*UpdateCustomerRes, error)
	UpdateCustomerPoints(context.Context, *UpdateCustomerPointsReq) (*UpdateCustomerPointsRes, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCustomerServiceServer struct {
	// NOSONAR : Auto-generated function, intentionally left blank
}

func (UnimplementedCustomerServiceServer) CreateCustomer(context.Context, *CreateCustomerReq) (*CreateCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) ListCustomer(context.Context, *ListCustomerReq) (*ListCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomer(context.Context, *UpdateCustomerReq) (*UpdateCustomerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) UpdateCustomerPoints(context.Context, *UpdateCustomerPointsReq) (*UpdateCustomerPointsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerPoints not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {
	// NOSONAR : Auto-generated function, intentionally left blank
}
func (UnimplementedCustomerServiceServer) testEmbeddedByValue() {
	// NOSONAR : Auto-generated function, intentionally left blank
}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCustomerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CustomerServiceServiceDesc, srv)
}

func CustomerServiceCreateCustomerHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(CreateCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerServiceCreateCustomerFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CreateCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func CustomerServiceListCustomerHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(ListCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).ListCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerServiceListCustomerFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(CustomerServiceServer).ListCustomer(ctx, req.(*ListCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func CustomerServiceUpdateCustomerHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(UpdateCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerServiceUpdateCustomerFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func CustomerServiceUpdateCustomerPointsHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(UpdateCustomerPointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomerPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerServiceUpdateCustomerPointsFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(CustomerServiceServer).UpdateCustomerPoints(ctx, req.(*UpdateCustomerPointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerServiceServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerServiceServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    CustomerServiceCreateCustomerHandler,
		},
		{
			MethodName: "ListCustomer",
			Handler:    CustomerServiceListCustomerHandler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    CustomerServiceUpdateCustomerHandler,
		},
		{
			MethodName: "UpdateCustomerPoints",
			Handler:    CustomerServiceUpdateCustomerPointsHandler,
		},
	},
	Streams: []grpc.StreamDesc{
		// NOSONAR : Auto-generated function, intentionally left blank
	},
	Metadata: "customer/customer.proto",
}
