// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transaction/transaction.proto

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionServiceTransactionRedeemPointFullMethodName = "/transaction.TransactionService/TransactionRedeemPoint"
	TransactionServiceListTransactionFullMethodName        = "/transaction.TransactionService/ListTransaction"
	TransactionServiceDetailTransactionFullMethodName      = "/transaction.TransactionService/DetailTransaction"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	TransactionRedeemPoint(ctx context.Context, in *TransactionRedeemPointReq, opts ...grpc.CallOption) (*TransactionRedeemPointRes, error)
	ListTransaction(ctx context.Context, in *ListTransactionReq, opts ...grpc.CallOption) (*ListTransactionRes, error)
	DetailTransaction(ctx context.Context, in *DetailTransactionReq, opts ...grpc.CallOption) (*DetailTransactionRes, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) TransactionRedeemPoint(ctx context.Context, in *TransactionRedeemPointReq, opts ...grpc.CallOption) (*TransactionRedeemPointRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionRedeemPointRes)
	err := c.cc.Invoke(ctx, TransactionServiceTransactionRedeemPointFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListTransaction(ctx context.Context, in *ListTransactionReq, opts ...grpc.CallOption) (*ListTransactionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionRes)
	err := c.cc.Invoke(ctx, TransactionServiceListTransactionFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DetailTransaction(ctx context.Context, in *DetailTransactionReq, opts ...grpc.CallOption) (*DetailTransactionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetailTransactionRes)
	err := c.cc.Invoke(ctx, TransactionServiceDetailTransactionFullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	TransactionRedeemPoint(context.Context, *TransactionRedeemPointReq) (*TransactionRedeemPointRes, error)
	ListTransaction(context.Context, *ListTransactionReq) (*ListTransactionRes, error)
	DetailTransaction(context.Context, *DetailTransactionReq) (*DetailTransactionRes, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct {
	// NOSONAR : Auto-generated function, intentionally left blank
}

func (UnimplementedTransactionServiceServer) TransactionRedeemPoint(context.Context, *TransactionRedeemPointReq) (*TransactionRedeemPointRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionRedeemPoint not implemented")
}
func (UnimplementedTransactionServiceServer) ListTransaction(context.Context, *ListTransactionReq) (*ListTransactionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DetailTransaction(context.Context, *DetailTransactionReq) (*DetailTransactionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {
	// NOSONAR : Auto-generated function, intentionally left blank
}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue() {
	// NOSONAR : Auto-generated function, intentionally left blank
}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionServiceServiceDesc, srv)
}

func TransactionServiceTransactionRedeemPointHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(TransactionRedeemPointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).TransactionRedeemPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionServiceTransactionRedeemPointFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(TransactionServiceServer).TransactionRedeemPoint(ctx, req.(*TransactionRedeemPointReq))
	}
	return interceptor(ctx, in, info, handler)
}

func TransactionServiceListTransactionHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(ListTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionServiceListTransactionFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(TransactionServiceServer).ListTransaction(ctx, req.(*ListTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func TransactionServiceDetailTransactionHandler(srv interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, ctx context.Context, dec func(interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}) error, interceptor grpc.UnaryServerInterceptor) (interface {
	// NOSONAR : Auto-generated function, intentionally left blank
}, error) {
	in := new(DetailTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DetailTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionServiceDetailTransactionFullMethodName,
	}
	handler := func(ctx context.Context, req interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}) (interface {
		// NOSONAR : Auto-generated function, intentionally left blank
	}, error) {
		return srv.(TransactionServiceServer).DetailTransaction(ctx, req.(*DetailTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionServiceServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionServiceServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionRedeemPoint",
			Handler:    TransactionServiceTransactionRedeemPointHandler,
		},
		{
			MethodName: "ListTransaction",
			Handler:    TransactionServiceListTransactionHandler,
		},
		{
			MethodName: "DetailTransaction",
			Handler:    TransactionServiceDetailTransactionHandler,
		},
	},
	Streams: []grpc.StreamDesc{
		// NOSONAR : Auto-generated function, intentionally left blank
	},
	Metadata: "transaction/transaction.proto",
}
